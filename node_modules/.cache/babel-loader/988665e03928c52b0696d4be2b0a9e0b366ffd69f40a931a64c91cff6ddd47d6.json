{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { toast } from \"react-toastify\";\nconst initialState = {\n  ques: [],\n  // array\n  ans: [],\n  // array of arrays\n  options: [],\n  choice: [],\n  title: \"Untitled\",\n  sub_ans: [],\n  score: 0,\n  description: \"Description\"\n};\nconst quizSlice = createSlice({\n  name: 'quiz',\n  initialState,\n  reducers: {\n    AddTotal: (state, action) => {\n      state.ques.push(action.payload.question);\n      state.options.push(action.payload.option);\n      state.ans.push(action.payload.ans);\n      state.choice.push(action.payload.choice);\n    },\n    EditQues: (state, action) => {\n      state.ques = action.payload.ques;\n    },\n    DeleteQues: (state, action) => {\n      state.ques = state.ques.filter(item => item !== state.ques[action.payload.index]);\n    },\n    EditOptions: (state, action) => {\n      state.options = action.payload.options;\n    },\n    DeleteOption: (state, action) => {\n      const i = action.payload.qindex; // ques index\n      const j = action.payload.oindex; // option index\n      if (state.options[i].length === 1) {\n        toast.info('Question must have one option');\n      } else {\n        const deleteElement = state.options[i][j];\n        state.options[i] = state.options[i].filter(item => item !== deleteElement);\n      }\n    },\n    EditAns: (state, action) => {\n      state.ans = action.payload.ans;\n    },\n    EditChoice: (state, action) => {\n      state.choice = action.payload.choice;\n    },\n    AddTitle: (state, action) => {\n      const title = action.payload.title;\n      const description = action.payload.description;\n      if (title) state.title = title;\n      if (description) state.description = description;\n    },\n    UpdateScore: (state, action) => {\n      const choice = action.payload.choice;\n      const len = action.payload.len;\n      const ans = action.payload.ans;\n      for (let i = 0; i < len; i++) {\n        if (choice[i] === 'radio' && state.sub_ans[i][0] === ans[i]) state.score += 1;else if (choice[i] === 'checkbox') {\n          const answers = ans[i].split(',');\n          if (answers.length === state.sub_ans.length) {\n            let flag = 0;\n            for (let j = 0; j < answers.length; j++) {\n              if (!state.sub_ans.filter(item => item === answers[j])) {\n                flag = 1;\n                break;\n              }\n              ;\n            }\n            if (flag === 0) state.score += 1;\n          }\n        }\n      }\n    },\n    submittedAns: (state, action) => {\n      const type = action.payload.type;\n      const index = action.payload.qindex;\n      const ans = action.payload.opt;\n      if (type === 'radio') {\n        state.sub_ans[index] = [ans];\n      } else {\n        if (!state.sub_ans[index].filter(item => item === ans)) {\n          state.sub_ans[index].push(ans);\n        }\n      }\n    },\n    reset: state => {\n      state.ques = [];\n      state.ans = [];\n      state.options = [];\n      state.choice = [];\n      state.state.title = \"Untitled\";\n      state.score = 0;\n      state.description = \"Description\";\n    }\n  }\n});\nexport const {\n  EditQues,\n  EditOptions,\n  EditAns,\n  EditChoice,\n  AddTotal,\n  AddTitle,\n  UpdateScore,\n  DeleteOption,\n  DeleteQues,\n  submittedAns,\n  reset\n} = quizSlice.actions;\nexport default quizSlice.reducer;","map":{"version":3,"names":["createSlice","toast","initialState","ques","ans","options","choice","title","sub_ans","score","description","quizSlice","name","reducers","AddTotal","state","action","push","payload","question","option","EditQues","DeleteQues","filter","item","index","EditOptions","DeleteOption","i","qindex","j","oindex","length","info","deleteElement","EditAns","EditChoice","AddTitle","UpdateScore","len","answers","split","flag","submittedAns","type","opt","reset","actions","reducer"],"sources":["C:/Users/satya/Desktop/courses/quiz/frontend/src/features/quizSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst initialState = {\r\n    ques: [], // array\r\n    ans: [], // array of arrays\r\n    options: [],\r\n    choice: [],\r\n    title: \"Untitled\",\r\n    sub_ans: [],\r\n    score: 0,\r\n    description: \"Description\"\r\n}\r\nconst quizSlice = createSlice({\r\n    name: 'quiz',\r\n    initialState,\r\n    reducers: {\r\n        AddTotal: (state, action) => {\r\n            state.ques.push(action.payload.question);\r\n            state.options.push(action.payload.option);\r\n            state.ans.push(action.payload.ans);\r\n            state.choice.push(action.payload.choice);\r\n        },\r\n        EditQues: (state, action) => {\r\n            state.ques = action.payload.ques;\r\n        },\r\n        DeleteQues: (state, action) => {\r\n            state.ques = state.ques.filter(item => item !== state.ques[action.payload.index]);\r\n        },\r\n        EditOptions: (state, action) => {\r\n            state.options = action.payload.options;\r\n        },\r\n        DeleteOption: (state, action) => {\r\n            const i = action.payload.qindex; // ques index\r\n            const j = action.payload.oindex; // option index\r\n            if (state.options[i].length === 1) {\r\n                toast.info('Question must have one option');\r\n            }\r\n            else {\r\n                const deleteElement = state.options[i][j];\r\n                state.options[i] = state.options[i].filter(item => item !== deleteElement);\r\n            }\r\n        },\r\n        EditAns: (state, action) => {\r\n            state.ans = action.payload.ans;\r\n        },\r\n        EditChoice: (state, action) => {\r\n            state.choice = action.payload.choice;\r\n        },\r\n        AddTitle: (state, action) => {\r\n            const title = action.payload.title;\r\n            const description = action.payload.description;\r\n            if(title) state.title = title;\r\n            if(description) state.description = description;\r\n        },\r\n        UpdateScore: (state, action) => {\r\n            const choice = action.payload.choice;\r\n            const len = action.payload.len;\r\n            const ans = action.payload.ans;\r\n            for (let i = 0; i < len; i++){\r\n                if (choice[i] === 'radio' && state.sub_ans[i][0] === ans[i]) state.score += 1;\r\n                else if (choice[i] === 'checkbox') {\r\n                    const answers = ans[i].split(',');\r\n                    if (answers.length === state.sub_ans.length) {\r\n                        let flag = 0;\r\n                        for (let j = 0; j < answers.length; j++){\r\n                            if (!state.sub_ans.filter(item => item === answers[j])) {\r\n                                flag = 1;\r\n                                break;\r\n                            };\r\n                        }\r\n                        if (flag === 0) state.score += 1;\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        submittedAns: (state, action) => {\r\n            const type = action.payload.type;\r\n            const index = action.payload.qindex;\r\n            const ans = action.payload.opt;\r\n            if (type === 'radio') {\r\n                state.sub_ans[index] = [ans];\r\n            }\r\n            else {\r\n                if (!state.sub_ans[index].filter(item => item === ans)) {\r\n                    state.sub_ans[index].push(ans);\r\n                }\r\n            }\r\n        },\r\n        reset: (state) => {\r\n            state.ques = [];\r\n            state.ans = [];\r\n            state.options = [];\r\n            state.choice = [];\r\n            state.\r\n            state.title = \"Untitled\";\r\n            state.score = 0;\r\n            state.description = \"Description\";\r\n        }\r\n    }\r\n});\r\nexport const { EditQues, EditOptions, EditAns, EditChoice, AddTotal, AddTitle, UpdateScore, DeleteOption, DeleteQues, submittedAns, reset }  = quizSlice.actions;\r\nexport default quizSlice.reducer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}